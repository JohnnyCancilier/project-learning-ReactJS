{"ast":null,"code":"var _jsxFileName = \"D:\\\\projectGitHub\\\\project-learning-ReactJS\\\\src\\\\contexts\\\\AuthContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useEffect, useState } from 'react';\nimport { auth, firebase } from \"../services/firebase\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext({});\nexport function AuthContextProvinder(props) {\n  _s();\n\n  const [user, setUser] = useState();\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged(user => {\n      if (user) {\n        const {\n          displayName,\n          photoURL,\n          uid\n        } = user;\n\n        if (!displayName || !photoURL) {\n          throw new Error('Missing information from Google Accout');\n        }\n\n        setUser({\n          id: uid,\n          name: displayName,\n          avatar: photoURL\n        });\n      }\n    });\n    return () => {\n      unsubscribe();\n    };\n  }, []);\n\n  async function singInWithGoogle() {\n    const provinder = new firebase.auth.GoogleAuthProvider();\n    const result = await auth.signInWithPopup(provinder);\n\n    if (result.user) {\n      const {\n        displayName,\n        photoURL,\n        uid\n      } = result.user;\n\n      if (!displayName || !photoURL) {\n        throw new Error('Missing information from Google Accout');\n      }\n\n      setUser({\n        id: uid,\n        name: displayName,\n        avatar: photoURL\n      });\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      singInWithGoogle\n    },\n    children: props.childreen\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AuthContextProvinder, \"hT6C72rcbfRUedrDq+TPaFfRI/M=\");\n\n_c = AuthContextProvinder;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvinder\");","map":{"version":3,"sources":["D:/projectGitHub/project-learning-ReactJS/src/contexts/AuthContext.tsx"],"names":["createContext","useEffect","useState","auth","firebase","AuthContext","AuthContextProvinder","props","user","setUser","unsubscribe","onAuthStateChanged","displayName","photoURL","uid","Error","id","name","avatar","singInWithGoogle","provinder","GoogleAuthProvider","result","signInWithPopup","childreen"],"mappings":";;;AAAA,SAASA,aAAT,EAAmCC,SAAnC,EAA8CC,QAA9C,QAA8D,OAA9D;AACA,SAASC,IAAT,EAAeC,QAAf,QAA+B,sBAA/B;;AAiBA,OAAO,MAAMC,WAAW,gBAAGL,aAAa,CAAC,EAAD,CAAjC;AAEP,OAAO,SAASM,oBAAT,CAA8BC,KAA9B,EAA+D;AAAA;;AAClE,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,EAAhC;AACAD,EAAAA,SAAS,CAAC,MAAM;AAChB,UAAMS,WAAW,GAAGP,IAAI,CAACQ,kBAAL,CAAwBH,IAAI,IAAI;AAClD,UAAGA,IAAH,EAAQ;AACN,cAAM;AAAEI,UAAAA,WAAF;AAAeC,UAAAA,QAAf;AAAyBC,UAAAA;AAAzB,YAAiCN,IAAvC;;AAEA,YAAI,CAACI,WAAD,IAAgB,CAACC,QAArB,EAA8B;AAC5B,gBAAM,IAAIE,KAAJ,CAAU,wCAAV,CAAN;AACD;;AACDN,QAAAA,OAAO,CAAC;AACRO,UAAAA,EAAE,EAAEF,GADI;AAERG,UAAAA,IAAI,EAAEL,WAFE;AAGRM,UAAAA,MAAM,EAAEL;AAHA,SAAD,CAAP;AAKD;AACF,KAbmB,CAApB;AAeA,WAAO,MAAK;AACVH,MAAAA,WAAW;AACZ,KAFD;AAID,GApBU,EAoBR,EApBQ,CAAT;;AAsBJ,iBAAeS,gBAAf,GAAiC;AAC7B,UAAMC,SAAS,GAAG,IAAIhB,QAAQ,CAACD,IAAT,CAAckB,kBAAlB,EAAlB;AACA,UAAMC,MAAM,GAAG,MAAMnB,IAAI,CAACoB,eAAL,CAAqBH,SAArB,CAArB;;AACI,QAAGE,MAAM,CAACd,IAAV,EAAe;AACX,YAAM;AAAEI,QAAAA,WAAF;AAAeC,QAAAA,QAAf;AAAyBC,QAAAA;AAAzB,UAAiCQ,MAAM,CAACd,IAA9C;;AAEA,UAAI,CAACI,WAAD,IAAgB,CAACC,QAArB,EAA8B;AAC9B,cAAM,IAAIE,KAAJ,CAAU,wCAAV,CAAN;AACC;;AACDN,MAAAA,OAAO,CAAC;AACRO,QAAAA,EAAE,EAAEF,GADI;AAERG,QAAAA,IAAI,EAAEL,WAFE;AAGRM,QAAAA,MAAM,EAAEL;AAHA,OAAD,CAAP;AAKH;AACN;;AAEC,sBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAACL,MAAAA,IAAD;AAAOW,MAAAA;AAAP,KAA7B;AAAA,cACKZ,KAAK,CAACiB;AADX;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;GA9CelB,oB;;KAAAA,oB","sourcesContent":["import { createContext, ReactNode, useEffect, useState } from 'react'\r\nimport { auth, firebase } from \"../services/firebase\";\r\n\r\ntype User = {\r\n    id: string;\r\n    name: string;\r\n    avatar: string\r\n}\r\n  \r\ntype AuthContextType = {\r\n    user: User | undefined;\r\n    singInWithGoogle: () => Promise<void>;\r\n}\r\n\r\ntype AuthContextProvinderProps = {\r\n      childreen: ReactNode;\r\n}\r\n\r\nexport const AuthContext = createContext({} as AuthContextType);\r\n\r\nexport function AuthContextProvinder(props: AuthContextProvinderProps){\r\n    const [user, setUser] = useState<User>();\r\n    useEffect(() => {\r\n    const unsubscribe = auth.onAuthStateChanged(user => {\r\n      if(user){\r\n        const { displayName, photoURL, uid } = user\r\n\r\n        if (!displayName || !photoURL){\r\n          throw new Error('Missing information from Google Accout')\r\n        }\r\n        setUser({\r\n        id: uid,\r\n        name: displayName,\r\n        avatar: photoURL\r\n        })\r\n      }\r\n    })\r\n\r\n    return () =>{\r\n      unsubscribe();\r\n    }\r\n\r\n  }, [])\r\n\r\nasync function singInWithGoogle(){\r\n    const provinder = new firebase.auth.GoogleAuthProvider();\r\n    const result = await auth.signInWithPopup(provinder)\r\n        if(result.user){\r\n            const { displayName, photoURL, uid } = result.user\r\n\r\n            if (!displayName || !photoURL){\r\n            throw new Error('Missing information from Google Accout')\r\n            }\r\n            setUser({\r\n            id: uid,\r\n            name: displayName,\r\n            avatar: photoURL\r\n            })\r\n        }\r\n  }\r\n    \r\n    return(\r\n        <AuthContext.Provider value={{user, singInWithGoogle}}>\r\n            {props.childreen}\r\n        </AuthContext.Provider>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}